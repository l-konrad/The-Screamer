stages:
  - devenv
  - build
  - build-werror
  - lint
  - style
  - release

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_UPDATE_FLAGS: --jobs 2
  CACHIX_CACHE_NAME: elektroline-emb

include:
    - 'https://gitlab.com/Cynerd/gitlab-ci-nix/-/raw/master/template.yml'


## Development environemnt stage ###############################################
# Build development environment to cache it.
devenv:
  stage: devenv
  extends: .nix
  script:
    - nix develop -c true

## Build stage #################################################################
.build:
  stage: build
  extends: .nix
  needs: ["devenv"]

build:
  extends: .build
  script:
    - nix build --log-lines 10000 .?submodules=1#
    - cp -r result/* ./
  artifacts:
    expose_as: "Regular build"
    expire_in: 1 month
    paths:
      - .config
      - System.map
      - nuttx.elf
      - nuttx.map

build-werror:
  extends: .build
  needs:
    - job: build
      artifacts: false
  allow_failure: true
  variables:
    EXTRAFLAGS: "-Werror"
  script:
    - nix develop --quiet -c make

build-debug:
  extends: build-werror
  before_script:
    - echo CONFIG_DEBUG=y >.config
    - nix develop -c make olddefconfig

# We prefer to always build with all asserts but to be sure we also try to
# build without them.
build-no-assert:
  extends: build-werror
  before_script:
    - "echo CONFIG_ASSERT=n >.config"
    - "nix develop -c make olddefconfig"

## Linters #####################################################################
.linter:
  stage: lint
  extends: .nix
  needs: ["devenv"]
  allow_failure: true

clang-tidy:
  extends: .linter
  script:
    - nix develop --quiet -c meson setup build
    - nix develop --quiet -c ninja -C build clang-tidy

shellcheck:
  extends: .linter
  script:
    - git ls-files '**.sh' | xargs nix run --quiet .#shellcheck

statix:
  extends: .linter
  script:
    - nix run --quiet .#statix -- check .

## Style stage #################################################################
.style:
  stage: style
  extends: .nix
  needs: ["devenv"]
  allow_failure: true

muon:
  extends: .style
  script:
    - |
      git ls-files '**/meson.build' meson_options.txt |
        xargs nix run --quiet .#muon -- fmt -e -i
    - git diff --exit-code

nuttx-style:
  extends: .style
  script:
    - nix develop -c ./nuttx/tools/nuttx-style.sh

clang-format:
  extends: .style
  script:
    - nix develop --quiet -c meson setup build
    - nix develop --quiet -c ninja -C build clang-format-check

shell-format:
  extends: .style
  script:
    - git ls-files '**.sh' '**.bats' | xargs nix run --quiet .#shfmt -- -d

nixfmt:
  extends: .style
  script:
    - nix fmt .
    - git diff --exit-code

deadnix:
  extends: .style
  script:
    - nix run --quiet .#deadnix -- --fail .

editorconfig-checker:
  extends: .style
  script:
    - nix run --quiet .#editorconfig-checker -- -exclude '.nix-cache/.*'

gitlint:
  extends: .style
  script:
    - git fetch
    - nix run --quiet .#gitlint -- --commits origin/master..$CI_COMMIT_SHA

## Release creation ############################################################
release:
  stage: release
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v/'
  image: "registry.gitlab.com/gitlab-org/release-cli:latest"
  needs:
    - job: build
      artifacts: true
  before_script:
    - apk update
    - apk add bash zip curl yq
  script:
    - ./release.sh
